class binaryTree:
    def __init__(self,rootval):
        self.left = None
        self.right = None
        self.rootval = rootval
    def getLeftNode(self):
        return self.left
    def getRightNode(self):
        return self.right
    def getRootValue(self):
        return self.rootval
    def insertLeftNode(self,value):
        if self.left == None:
            self.left = binaryTree(value)
        else:
            newNode = binaryTree(value)
            newNode.left = self.left
            self.left = newNode
    def insertRightNode(self,value):
        if self.right == None:
            self.right = binaryTree(value)
        else:
            newNode = binaryTree(value)
            newNode.right = self.right
            self.right=newNode
def dfs(tree):
    if tree is None:
        return []
    result = []
    stack = [tree]
    while stack:
        node = stack.pop()
        result.append(node.getRootValue())
        if node.getRightNode():
            stack.append(node.getRightNode())
        if node.getLeftNode():
            stack.append(node.getLeftNode())
    return result
tree = binaryTree(2)
tree.insertLeftNode(1)
tree.insertRightNode(3)
tree.left.left = binaryTree(5)
tree.left.right = binaryTree(6)
tree.right.left = binaryTree(4)
tree.right.right = binaryTree(7)
dfs_result = dfs(tree)
print("DFS of the tree:", dfs_result)
